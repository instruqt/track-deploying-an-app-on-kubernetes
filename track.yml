id: jrqqdno24l
type: track
version: 0.0.0
slug: deploying-an-app-on-kubernetes
icon: https://storage.googleapis.com/instruqt-frontend/img/tracks/kubernetes.png
title: Deploying an app on Kubernetes
teaser: Learn how to run applications on Kubernetes.
description: |-
  In this track you will deploy your first application on a Kubernetes cluster.

  Through these deployment tasks, youâ€™ll gain familiarity with the following:

  - General concepts
    - **Configuration files** - Written in YAML or JSON, these files describe the desired state of your application in terms of Kubernetes API objects. A file can include one or more API object descriptions (manifests).
    - **Pods** - This is the basic unit for all of the workloads you run on Kubernetes. These workloads, such as Deployments and Jobs, are composed of one or more Pods. To learn more, check out this explanation of Pods and Nodes.

  - Common workload objects
    - Deployment - The most common way of running X copies (Pods) of your application. Supports rolling updates to your container images.

  More information on these subjects can be found [here](https://kubernetes.io/docs/concepts/)
tags:
- kubernetes
challenges:
- id: vgeeozdqak
  slug: run-an-application
  credits: 10
  title: Run an application
  teaser: Run your first application on Kubernetes from the command-line.
  notes:
  - type: text
    title: ""
    contents: |-
      Once you have a running Kubernetes cluster, you can **deploy** your **containerized applications** on top of it.

      To do so, you create a Kubernetes **Deployment configuration**.
  - type: text
    title: ""
    contents: |-
      The Deployment instructs Kubernetes **how to create and update** instances of your application.

      Once you've created a Deployment, the Kubernetes master **schedules** mentioned application **instances onto individual Nodes** in the cluster.
  - type: text
    title: ""
    contents: When you create a Deployment, you'll need to specify the **container
      image** for your application and the **number of replicas** that you want to
      run.
  - type: text
    title: ""
    contents: |-
      You can create and manage a Deployment by using the **Kubernetes command line interface, Kubectl**.

      ```
      kubectl run <name> --image=<container-image> --port=<container-port>
      ```

      Kubectl uses the **Kubernetes API** to interact with the cluster.
  assignment: |-
    Run the **nginx docker image** using **port 80** on Kubernetes, by using **kubectl**.

    Be sure to:
    - use **port 80**
    - name it **nginx**
    - use the **nginx image** from the [Docker hub](https://hub.docker.com/_/nginx/)

    You can check if everything is working correctly by **refreshing the Kubernetes tab** and checking the deployments.

    If you need more help, try **kubectl run --help**.
  difficulty: basic
  timelimit: 300
  tabs:
  - type: terminal
    title: Shell
    hostname: kubernetes
  - type: service
    title: Kubernetes
    hostname: kubernetes
    port: 8001
    path: /api/v1/namespaces/kube-system/services/kubernetes-dashboard/proxy/#!/deployment?namespace=default
- id: klllqxr3mk
  slug: remove-an-application
  credits: 10
  title: Remove an application
  teaser: Get rid of the application that you started.
  notes:
  - type: text
    title: ""
    contents: |-
      When you want to **stop** your application, you need to **remove it** from the Kubernetes cluster.

      Removing the deployment will also **destroy** any **underlying containers**.
  - type: text
    title: ""
    contents: |-
      You can **delete the deployment** using the Kubernetes command line tool, kubectl:

      ```
      kubectl delete deployment <name>
      ```
  assignment: Remove the **nginx deployment** we created in the **previous challenge**.
  difficulty: basic
  timelimit: 300
  tabs:
  - type: terminal
    title: Shell
    hostname: kubernetes
  - type: service
    title: Kubernetes
    hostname: kubernetes
    port: 8001
    path: /api/v1/namespaces/kube-system/services/kubernetes-dashboard/proxy/#!/deployment?namespace=default
- id: 5z22qd8wx5
  slug: definition-files
  credits: 10
  title: Definition files
  teaser: Take a look at the way objects are defined in Kubernetes.
  notes:
  - type: text
    title: ""
    contents: |-
      You interact with Kubernetes objects by **submitting a definition**.
      This definition is a **declaration of a desired state**.

      Desired state is a very important concept in the Kubernetes model.
  - type: text
    title: ""
    contents: |-
      Many things present a desired state to the system, and it is Kubernetes' responsibility to make sure that the **current state matches the desired state**.

      For example, when you create a Pod, you declare that you want the containers in it to be running.
  - type: text
    title: ""
    contents: |-
      If the containers happen to **not be running** (e.g. program failure, etc.), Kubernetes will continue to **(re-)create them** for you in order to **drive them to the desired state**.

      This process continues until the Pod is deleted.
  - type: text
    title: ""
    contents: |-
      **Pods** are the **atomic unit** on the Kubernetes platform.
      When you create a Deployment on Kubernetes, that Deployment **creates Pods** with **containers inside** them.

      Each Pod is **tied to the Node** where it is scheduled, and remains there **until termination or deletion**.
  - type: text
    title: ""
    contents: |-
      A Pod represents a group of **one or more** application containers that are **relatively tightly coupled**, and some **shared resources** for those containers:
      - **Shared storage**, as Volumes
      - **Networking**, as a unique cluster IP address
      - **Information about how to run each container**, such as the container image version or specific ports to use

      Pods are **always co-located and co-scheduled** and run in a shared context on the same Node.
  - type: text
    title: ""
    contents: The simplest **pod definition** describes the deployment of a **single
      container**.
  assignment: |-
    We have created a simple **pod definition** file for you.

    Take a look at the contents of **nginx.yml**.
  difficulty: basic
  timelimit: 300
  tabs:
  - type: terminal
    title: Shell
    hostname: kubernetes
  - type: service
    title: Kubernetes
    hostname: kubernetes
    port: 8001
    path: /api/v1/namespaces/kube-system/services/kubernetes-dashboard/proxy/#!/pod?namespace=default
- id: k2eejowa3k
  slug: apply-a-definition
  credits: 10
  title: Apply a definition
  teaser: Deploy applications on Kubernetes using the definition files.
  notes:
  - type: text
    title: ""
    contents: |-
      You can submit definitions to the Kubernetes API with kubectl:
      ```
      kubectl create -f <file>
      ```

      This will tell Kubernetes to create the desired state described in the definition file.
  - type: text
    title: ""
    contents: |-
      You can create a **single file** at a time, or **all files in a directory** at once.

      ```
      kubectl create -f <directory>
      ```
  assignment: Submit the **nginx.yml** file to the Kubernetes master using **kubectl**.
  difficulty: basic
  timelimit: 300
  tabs:
  - type: terminal
    title: Shell
    hostname: kubernetes
  - type: service
    title: Kubernetes
    hostname: kubernetes
    port: 8001
    path: /api/v1/namespaces/kube-system/services/kubernetes-dashboard/proxy/#!/pod?namespace=default
- id: veeermljav
  slug: edit-a-definition
  credits: 10
  title: Edit a definition
  teaser: Update the definition files of your Kubernetes objects.
  notes:
  - type: text
    title: ""
    contents: |-
      Instead of opening the file yourself and applying the changes, you can also use:
      ```
      kubectl edit pod/<name>
      ```

      This can be used for any Kubernetes resource by replacing pod with the resource type.
  assignment: |-
    There is a newer version of the nginx Docker image.

    Update the version of the nginx container to be 1.13.8-alpine by using the edit command.
  difficulty: basic
  timelimit: 300
  tabs:
  - type: terminal
    title: Shell
    hostname: kubernetes
  - type: service
    title: Kubernetes
    hostname: kubernetes
    port: 8001
    path: /api/v1/namespaces/kube-system/services/kubernetes-dashboard/proxy/#!/pod?namespace=default
- id: 58eenqy3n5
  slug: delete-a-definition
  credits: 10
  title: Delete a definition
  teaser: Getting rid of the objects created by your definition files.
  notes:
  - type: text
    title: ""
    contents: |-
      Removing all resources defined in a Kubernetes definition can be easily done with:
      ```
      kubectl delete -f <file>
      ```

      This will remove all resources present in the definition(s).
  assignment: Remove the nginx pod.
  difficulty: basic
  timelimit: 300
  tabs:
  - type: terminal
    title: Shell
    hostname: kubernetes
  - type: service
    title: Kubernetes
    hostname: kubernetes
    port: 8001
    path: /api/v1/namespaces/kube-system/services/kubernetes-dashboard/proxy/#!/pod?namespace=default
developers:
- erik@instruqt.com
- bas@instruqt.com
- niels@instruqt.com
published: true
